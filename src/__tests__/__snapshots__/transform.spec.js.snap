exports[`transform adds default class for exported typed object 1`] = `
"// @flow
import * as Immutable from \'immutable\';

import type { BarModelType } from \'./bar\';
import { Bar } from \'./bar\';
import ImmutableModel from \'../../../src/ImmutableModel\';

export type FooModelType = {
  maybeStr: ?string,
  str: string,
  maybeNum: ?number,
  num: number,
  maybeObj: ?Object,
  obj: Object,
  maybeBar: ?BarModelType,
  bar: BarModelType,
  maybeFn: ?Function,
  fn: Function,
};

// /////////////////////////////////////////////////////////////////////////////
//
// NOTE: EVERYTHING BELOW THIS COMMENT IS GENERATED. DO NOT MAKE CHANGES HERE.
//
// If you need to update this class, update the corresponding flow type above
// and re-run the flow-immutable-models codemod
//
// /////////////////////////////////////////////////////////////////////////////
export class Foo extends ImmutableModel {
  static fromJS(json: FooModelType): Foo {
    const state: Object = Object.assign({}, json);
    state.maybeBar = (state.maybeBar ? Bar.fromJS(state.maybeBar) : state.maybeBar);
    state.bar = Bar.fromJS(state.bar);
    return new this(Immutable.Map(state));
  }

  toJS(): FooModelType {
    return {
      maybeStr: this.maybeStr,
      str: this.str,
      maybeNum: this.maybeNum,
      num: this.num,
      maybeObj: this.maybeObj,
      obj: this.obj,
      maybeBar: (this.maybeBar ? this.maybeBar.toJS() : this.maybeBar),
      bar: this.bar.toJS(),
      maybeFn: this.maybeFn,
      fn: this.fn,
    };
  }

  get maybeStr(): ?string {
    return this._state.get(\'maybeStr\');
  }

  setMaybeStr(maybeStr: ?string): this {
    return this.clone(this._state.set(\'maybeStr\', maybeStr));
  }

  get str(): string {
    return this._state.get(\'str\');
  }

  setStr(str: string): this {
    return this.clone(this._state.set(\'str\', str));
  }

  get maybeNum(): ?number {
    return this._state.get(\'maybeNum\');
  }

  setMaybeNum(maybeNum: ?number): this {
    return this.clone(this._state.set(\'maybeNum\', maybeNum));
  }

  get num(): number {
    return this._state.get(\'num\');
  }

  setNum(num: number): this {
    return this.clone(this._state.set(\'num\', num));
  }

  get maybeObj(): ?Object {
    return this._state.get(\'maybeObj\');
  }

  setMaybeObj(maybeObj: ?Object): this {
    return this.clone(this._state.set(\'maybeObj\', maybeObj));
  }

  get obj(): Object {
    return this._state.get(\'obj\');
  }

  setObj(obj: Object): this {
    return this.clone(this._state.set(\'obj\', obj));
  }

  get maybeBar(): ?Bar {
    return this._state.get(\'maybeBar\');
  }

  setMaybeBar(maybeBar: ?Bar): this {
    return this.clone(this._state.set(\'maybeBar\', maybeBar));
  }

  get bar(): Bar {
    return this._state.get(\'bar\');
  }

  setBar(bar: Bar): this {
    return this.clone(this._state.set(\'bar\', bar));
  }

  get maybeFn(): ?Function {
    return this._state.get(\'maybeFn\');
  }

  setMaybeFn(maybeFn: ?Function): this {
    return this.clone(this._state.set(\'maybeFn\', maybeFn));
  }

  get fn(): Function {
    return this._state.get(\'fn\');
  }

  setFn(fn: Function): this {
    return this.clone(this._state.set(\'fn\', fn));
  }
}
"
`;

exports[`transform converts arrays to Immutable lists 1`] = `
"// @flow
import * as Immutable from \'immutable\';

import ImmutableModel from \'../../../src/ImmutableModel\';

export type ArrModelType = {
  arr: Array<string>,
  maybeArr: ?Array<string>,
};

// /////////////////////////////////////////////////////////////////////////////
//
// NOTE: EVERYTHING BELOW THIS COMMENT IS GENERATED. DO NOT MAKE CHANGES HERE.
//
// If you need to update this class, update the corresponding flow type above
// and re-run the flow-immutable-models codemod
//
// /////////////////////////////////////////////////////////////////////////////
export class Arr extends ImmutableModel {
  static fromJS(json: ArrModelType): Arr {
    const state: Object = Object.assign({}, json);
    state.arr = Immutable.List(state.arr);
    state.maybeArr = (state.maybeArr ? Immutable.List(state.maybeArr) : state.maybeArr);
    return new this(Immutable.Map(state));
  }

  toJS(): ArrModelType {
    return {
      arr: this.arr.toArray(),
      maybeArr: (this.maybeArr ? this.maybeArr.toArray() : this.maybeArr),
    };
  }

  get arr(): Immutable.List<string> {
    return this._state.get(\'arr\');
  }

  setArr(arr: Immutable.List<string>): this {
    return this.clone(this._state.set(\'arr\', arr));
  }

  get maybeArr(): ?Immutable.List<string> {
    return this._state.get(\'maybeArr\');
  }

  setMaybeArr(maybeArr: ?Immutable.List<string>): this {
    return this.clone(this._state.set(\'maybeArr\', maybeArr));
  }
}
"
`;

exports[`transform converts maybe props to use nullable fields 1`] = `
"// @flow
import * as Immutable from \'immutable\';

import ImmutableModel from \'../../../src/ImmutableModel\';

export type MaybePropsModelType = {
  maybePropNum?: number,
  maybePropStr?: ?string,
  maybePropArr?: Array<string>,
};

// /////////////////////////////////////////////////////////////////////////////
//
// NOTE: EVERYTHING BELOW THIS COMMENT IS GENERATED. DO NOT MAKE CHANGES HERE.
//
// If you need to update this class, update the corresponding flow type above
// and re-run the flow-immutable-models codemod
//
// /////////////////////////////////////////////////////////////////////////////
export class MaybeProps extends ImmutableModel {
  static fromJS(json: MaybePropsModelType): MaybeProps {
    const state: Object = Object.assign({}, json);
    state.maybePropArr = (state.maybePropArr ? Immutable.List(state.maybePropArr) : state.maybePropArr);
    return new this(Immutable.Map(state));
  }

  toJS(): MaybePropsModelType {
    const js: MaybePropsModelType = {};

    if (this.maybePropNum != null) {
      js.maybePropNum = this.maybePropNum;
    }

    if (this.maybePropStr != null) {
      js.maybePropStr = this.maybePropStr;
    }

    if (this.maybePropArr != null) {
      js.maybePropArr = (this.maybePropArr ? this.maybePropArr.toArray() : this.maybePropArr);
    }

    return js;
  }

  get maybePropNum(): ?number {
    return this._state.get(\'maybePropNum\');
  }

  setMaybePropNum(maybePropNum: ?number): this {
    return this.clone(this._state.set(\'maybePropNum\', maybePropNum));
  }

  get maybePropStr(): ?string {
    return this._state.get(\'maybePropStr\');
  }

  setMaybePropStr(maybePropStr: ?string): this {
    return this.clone(this._state.set(\'maybePropStr\', maybePropStr));
  }

  get maybePropArr(): ?Immutable.List<string> {
    return this._state.get(\'maybePropArr\');
  }

  setMaybePropArr(maybePropArr: ?Immutable.List<string>): this {
    return this.clone(this._state.set(\'maybePropArr\', maybePropArr));
  }
}
"
`;

exports[`transform converts object maps to immutable maps 1`] = `
"// @flow
import * as Immutable from \'immutable\';
import ImmutableModel from \'../../../src/ImmutableModel\';

export type OtherModelType = {
  prop: boolean,
};

export type MyMapModelType = {
  numberMap: { [key: string]: number },
  modelMap: { [key: string]: OtherModelType },
};

// /////////////////////////////////////////////////////////////////////////////
//
// NOTE: EVERYTHING BELOW THIS COMMENT IS GENERATED. DO NOT MAKE CHANGES HERE.
//
// If you need to update this class, update the corresponding flow type above
// and re-run the flow-immutable-models codemod
//
// /////////////////////////////////////////////////////////////////////////////
export class Other extends ImmutableModel {
  static fromJS(json: OtherModelType): Other {
    const state: Object = Object.assign({}, json);
    return new this(Immutable.Map(state));
  }

  toJS(): OtherModelType {
    return {
      prop: this.prop,
    };
  }

  get prop(): boolean {
    return this._state.get(\'prop\');
  }

  setProp(prop: boolean): this {
    return this.clone(this._state.set(\'prop\', prop));
  }
}

export class MyMap extends ImmutableModel {
  static fromJS(json: MyMapModelType): MyMap {
    const state: Object = Object.assign({}, json);
    state.numberMap = Immutable.Map(state.numberMap);
    state.modelMap = Immutable.Map(state.modelMap).map(item => Other.fromJS(item));
    return new this(Immutable.Map(state));
  }

  toJS(): MyMapModelType {
    return {
      numberMap: this.numberMap.toObject(),
      modelMap: this.modelMap.map(item => item.toJS()).toObject(),
    };
  }

  get numberMap(): Immutable.Map<string, number> {
    return this._state.get(\'numberMap\');
  }

  setNumberMap(numberMap: Immutable.Map<string, number>): this {
    return this.clone(this._state.set(\'numberMap\', numberMap));
  }

  get modelMap(): Immutable.Map<string, Other> {
    return this._state.get(\'modelMap\');
  }

  setModelMap(modelMap: Immutable.Map<string, Other>): this {
    return this.clone(this._state.set(\'modelMap\', modelMap));
  }
}
"
`;

exports[`transform converts referenced types in getters and setters 1`] = `
"// @flow
import * as Immutable from \'immutable\';

import type { BarModelType } from \'./bar\';
import { Bar } from \'./bar\';
import ImmutableModel from \'../../../src/ImmutableModel\';

export type FooModelType = {
  ref: BarModelType,
  maybeRef: ?BarModelType,
  str: string,
};

// /////////////////////////////////////////////////////////////////////////////
//
// NOTE: EVERYTHING BELOW THIS COMMENT IS GENERATED. DO NOT MAKE CHANGES HERE.
//
// If you need to update this class, update the corresponding flow type above
// and re-run the flow-immutable-models codemod
//
// /////////////////////////////////////////////////////////////////////////////
export class Foo extends ImmutableModel {
  static fromJS(json: FooModelType): Foo {
    const state: Object = Object.assign({}, json);
    state.ref = Bar.fromJS(state.ref);
    state.maybeRef = (state.maybeRef ? Bar.fromJS(state.maybeRef) : state.maybeRef);
    return new this(Immutable.Map(state));
  }

  toJS(): FooModelType {
    return {
      ref: this.ref.toJS(),
      maybeRef: (this.maybeRef ? this.maybeRef.toJS() : this.maybeRef),
      str: this.str,
    };
  }

  get ref(): Bar {
    return this._state.get(\'ref\');
  }

  setRef(ref: Bar): this {
    return this.clone(this._state.set(\'ref\', ref));
  }

  get maybeRef(): ?Bar {
    return this._state.get(\'maybeRef\');
  }

  setMaybeRef(maybeRef: ?Bar): this {
    return this.clone(this._state.set(\'maybeRef\', maybeRef));
  }

  get str(): string {
    return this._state.get(\'str\');
  }

  setStr(str: string): this {
    return this.clone(this._state.set(\'str\', str));
  }
}
"
`;

exports[`transform converts string literal types 1`] = `
"// @flow
import * as Immutable from \'immutable\';

import ImmutableModel from \'../../../src/ImmutableModel\';

export type StringLiteralModelType = {
  stringLiteral: \'string\',
  unionStringLiteral: \'string\' | \'literal\',
};

// /////////////////////////////////////////////////////////////////////////////
//
// NOTE: EVERYTHING BELOW THIS COMMENT IS GENERATED. DO NOT MAKE CHANGES HERE.
//
// If you need to update this class, update the corresponding flow type above
// and re-run the flow-immutable-models codemod
//
// /////////////////////////////////////////////////////////////////////////////
export class StringLiteral extends ImmutableModel {
  static fromJS(json: StringLiteralModelType): StringLiteral {
    const state: Object = Object.assign({}, json);
    return new this(Immutable.Map(state));
  }

  toJS(): StringLiteralModelType {
    return {
      stringLiteral: this.stringLiteral,
      unionStringLiteral: this.unionStringLiteral,
    };
  }

  get stringLiteral(): \'string\' {
    return this._state.get(\'stringLiteral\');
  }

  setStringLiteral(stringLiteral: \'string\'): this {
    return this.clone(this._state.set(\'stringLiteral\', stringLiteral));
  }

  get unionStringLiteral(): \'string\' | \'literal\' {
    return this._state.get(\'unionStringLiteral\');
  }

  setUnionStringLiteral(unionStringLiteral: \'string\' | \'literal\'): this {
    return this.clone(this._state.set(\'unionStringLiteral\', unionStringLiteral));
  }
}
"
`;

exports[`transform does not instantiate imported types 1`] = `
"// @flow
import * as Immutable from \'immutable\';

import ImmutableModel from \'../../../src/ImmutableModel\';
import type { Comparator } from \'./Comparator\';

export type NonClassImportedModelType = {
  comparator: Comparator,
};

// /////////////////////////////////////////////////////////////////////////////
//
// NOTE: EVERYTHING BELOW THIS COMMENT IS GENERATED. DO NOT MAKE CHANGES HERE.
//
// If you need to update this class, update the corresponding flow type above
// and re-run the flow-immutable-models codemod
//
// /////////////////////////////////////////////////////////////////////////////
export class NonClassImported extends ImmutableModel {
  static fromJS(json: NonClassImportedModelType): NonClassImported {
    const state: Object = Object.assign({}, json);
    return new this(Immutable.Map(state));
  }

  toJS(): NonClassImportedModelType {
    return {
      comparator: this.comparator,
    };
  }

  get comparator(): Comparator {
    return this._state.get(\'comparator\');
  }

  setComparator(comparator: Comparator): this {
    return this.clone(this._state.set(\'comparator\', comparator));
  }
}
"
`;

exports[`transform does not instantiate inline non-class props 1`] = `
"// @flow
import * as Immutable from \'immutable\';

import ImmutableModel from \'../../../src/ImmutableModel\';

type Operator = \"*\" | \"/\" | \"+\" | \"-\";
export type Comparator = \"<\" | \">\" | \"=\" | \"!=\";

export type NonClassModelType = {
  operator: Operator,
  comparator: Comparator,
};

// /////////////////////////////////////////////////////////////////////////////
//
// NOTE: EVERYTHING BELOW THIS COMMENT IS GENERATED. DO NOT MAKE CHANGES HERE.
//
// If you need to update this class, update the corresponding flow type above
// and re-run the flow-immutable-models codemod
//
// /////////////////////////////////////////////////////////////////////////////
export class NonClass extends ImmutableModel {
  static fromJS(json: NonClassModelType): NonClass {
    const state: Object = Object.assign({}, json);
    return new this(Immutable.Map(state));
  }

  toJS(): NonClassModelType {
    return {
      operator: this.operator,
      comparator: this.comparator,
    };
  }

  get operator(): Operator {
    return this._state.get(\'operator\');
  }

  setOperator(operator: Operator): this {
    return this.clone(this._state.set(\'operator\', operator));
  }

  get comparator(): Comparator {
    return this._state.get(\'comparator\');
  }

  setComparator(comparator: Comparator): this {
    return this.clone(this._state.set(\'comparator\', comparator));
  }
}
"
`;

exports[`transform initializes arrays of other model types 1`] = `
"// @flow
import * as Immutable from \'immutable\';

import ImmutableModel from \'../../../src/ImmutableModel\';
import { Bar } from \'./bar\';
import type { BarModelType } from \'./bar\';

export type ArrModelType = {
  arr: Array<BarModelType>,
};

// /////////////////////////////////////////////////////////////////////////////
//
// NOTE: EVERYTHING BELOW THIS COMMENT IS GENERATED. DO NOT MAKE CHANGES HERE.
//
// If you need to update this class, update the corresponding flow type above
// and re-run the flow-immutable-models codemod
//
// /////////////////////////////////////////////////////////////////////////////
export class Arr extends ImmutableModel {
  static fromJS(json: ArrModelType): Arr {
    const state: Object = Object.assign({}, json);
    state.arr = Immutable.List(state.arr).map(item => Bar.fromJS(item));
    return new this(Immutable.Map(state));
  }

  toJS(): ArrModelType {
    return {
      arr: this.arr.toArray().map(item => item.toJS()),
    };
  }

  get arr(): Immutable.List<Bar> {
    return this._state.get(\'arr\');
  }

  setArr(arr: Immutable.List<Bar>): this {
    return this.clone(this._state.set(\'arr\', arr));
  }
}
"
`;
